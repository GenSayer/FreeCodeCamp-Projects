** start of index.html **

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <link href="https://fonts.googleapis.com/css2?family=MedievalSharp&family=Uncial+Antiqua&display=swap" rel="stylesheet"></link>

  <title>RPG Creature Search</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <main class="container">
    <h1>üßô‚Äç‚ôÇÔ∏è RPG Creature Search</h1>
    
    <form id="search-form" role="search">
      <label for="search-input">Creature Name or ID:</label>
      <input type="text" id="search-input" required />
      <button id="search-button">Search</button>
    </form>

    <div class="output">
      <div class="top-container">
        <div class="name-and-id">
          <h2 id="creature-name"></h2>
          <span id="creature-id"></span>
          <div class="size">
            <span id="weight"></span>
            <span id="height"></span>
          </div>
        </div>

        <div id="types" class="types"></div>

        <div class="special">
          <h3 id="special-name"></h3>
          <p id="special-description"></p>
        </div>
      </div>

      <div class="bottom-container">
        <table>
          <thead>
            <tr>
              <th>Stat</th>
              <th>Value</th>
            </tr>
          </thead>
          <tbody>
            <tr><td>HP</td><td id="hp"></td></tr>
            <tr><td>Attack</td><td id="attack"></td></tr>
            <tr><td>Defense</td><td id="defense"></td></tr>
            <tr><td>Special Attack</td><td id="special-attack"></td></tr>
            <tr><td>Special Defense</td><td id="special-defense"></td></tr>
            <tr><td>Speed</td><td id="speed"></td></tr>
          </tbody>
        </table>
      </div>
    </div>
  </main>

  <script src="./script.js"></script>
</body>
</html>


** end of index.html **

** start of script.js **

// Code partially inspired by and borrowed from codeManS pokemon tutorial 

const searchForm = document.getElementById("search-form");
const searchInput = document.getElementById("search-input");
const creatureName = document.getElementById("creature-name");
const creatureID = document.getElementById("creature-id");
const creatureWeight = document.getElementById("weight");
const creatureHeight = document.getElementById("height");
const creatureSpecialName = document.getElementById("special-name");
const creatureSpecialDescription = document.getElementById("special-description");
const creatureHP = document.getElementById("hp");
const creatureAttack = document.getElementById("attack");
const creatureDefense = document.getElementById("defense");
const creatureSpecialAttack = document.getElementById("special-attack");
const creatureSpecialDefense = document.getElementById("special-defense");
const creatureSpeed = document.getElementById("speed");
const creatureTypes = document.getElementById("types");


// Get the creature
const getCreature = async () => {
  try {
    const creatureNameOrId = searchInput.value.toLowerCase();
    const res = await fetch(`https://rpg-creature-api.freecodecamp.rocks/api/creature/${creatureNameOrId}`);
    const data = await res.json();
    setCreatureInfo(data);
  } catch (err) {
    alert("Creature not found");
    console.log(err);
  }
}

// Set the creature info
const setCreatureInfo = data => {
  const {name, id, weight, height, stats, special, types} = data;

  // Get the info
  creatureName.textContent = `${name.toUpperCase()}`;
  creatureID.textContent = `#${id}`;
  creatureWeight.textContent = `Weight: ${weight}`;
  creatureHeight.textContent = `Height: ${height}`;
  creatureSpecialName.textContent = special.name;
  creatureSpecialDescription.textContent = special.description;

  // Get the stats
  creatureHP.textContent = stats[0].base_stat;
  creatureAttack.textContent = stats[1].base_stat;
  creatureDefense.textContent = stats[2].base_stat;
  creatureSpecialAttack.textContent = stats[3].base_stat;
  creatureSpecialDefense.textContent = stats[4].base_stat;
  creatureSpeed.textContent = stats[5].base_stat;

  // Get the types
  creatureTypes.innerHTML = types.map(obj => {  
   return `<span class="type ${obj.name}">${obj.name}</span>`
  }).join("");
}

// Add Event Listener for searching
searchForm.addEventListener('submit', e => {
  e.preventDefault();
  getCreature();
});

** end of script.js **

** start of styles.css **

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'MedievalSharp', serif;
  background: url('https://images.unsplash.com/photo-1610718021202-b4570c2a7a40') no-repeat center center fixed;
  background-size: cover;
  color: #f5f0dc;
  min-height: 100vh;
  display: flex;
  justify-content: center;
  padding: 40px 20px;
}

.container {
  background-color: rgba(28, 28, 28, 0.95);
  border: 2px solid #bb9c66;
  border-radius: 12px;
  padding: 30px;
  max-width: 600px;
  width: 100%;
  box-shadow: 0 0 20px #000;
}

/* Header */
h1 {
  text-align: center;
  font-size: 2rem;
  margin-bottom: 25px;
  color: #ffefb1;
  text-shadow: 1px 1px 2px #000;
}

/* Form */
form {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 25px;
}

label {
  font-size: 1rem;
  color: #e0c88d;
}

input[type="text"] {
  padding: 10px;
  font-size: 1rem;
  border: 1px solid #bb9c66;
  border-radius: 6px;
  background-color: #fef9e7;
  color: #333;
}

button {
  padding: 10px;
  font-size: 1rem;
  border: none;
  background-color: #bb9c66;
  color: #2c2c2c;
  font-weight: bold;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: #d6b676;
}

/* Output sections */
.output {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.name-and-id h2 {
  font-size: 1.5rem;
  color: #ffefb1;
  text-shadow: 1px 1px 1px #000;
}

#creature-id {
  font-size: 1rem;
  color: #ccc;
}

.size {
  font-size: 0.95rem;
  margin-top: 5px;
  color: #ddd;
}

/* Types */
.types {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-top: 10px;
}

.types .type {
  padding: 5px 10px;
  border-radius: 20px;
  background-color: #444;
  color: white;
  font-weight: bold;
  font-size: 0.9rem;
  text-transform: uppercase;
}

.type.Fire { background-color: #e25822; }
.type.Water { background-color: #3298dc; }
.type.Grass { background-color: #4caf50; }
.type.Electric { background-color: #ffce00; color: #333; }
.type.Dark { background-color: #2f2f2f; }
.type.Psychic { background-color: #d46bff; }
.type.Fairy { background-color: #fda4ff; }
.type.Normal { background-color: #9e9e9e; }

/* Special section */
.special h3 {
  color: #ffe58a;
  font-size: 1.2rem;
  margin-bottom: 5px;
}

.special p {
  font-size: 0.95rem;
  line-height: 1.4;
  color: #eee;
}

/* Stats Table */
table {
  width: 100%;
  border-collapse: collapse;
  background-color: #1a1a1a;
  border: 1px solid #444;
}

th, td {
  padding: 10px;
  text-align: left;
  font-size: 0.95rem;
}

th {
  background-color: #2d2d2d;
  color: #f3e7ca;
  border-bottom: 1px solid #555;
}

td {
  border-bottom: 1px solid #333;
}

tbody tr:last-child td {
  border-bottom: none;
}


** end of styles.css **

